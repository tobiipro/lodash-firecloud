{"version":3,"sources":["../../src/mixins/memoize-ttl.ts"],"names":[],"mappings":"uGAAA,wD;;;;;;AAMA;;;;;;;;;;AAUO,IAAI,UAAU,GAAG,gBAAE,MAAF,CAAS;AAC/B,GAD+B;AAE/B,MAF+B;AAG/B,QAH+B;AAIP;AACxB,MAAI,EAAE,GAAG,gBAAE,MAAF,CAAS,UAAS,GAAG,IAAZ,EAAgD;AAChE,QAAI,GAAG,GAAG,gBAAE,WAAF,CAAc,QAAd,IAA0B,gBAAE,IAAF,CAAO,IAAP,CAA1B,GAAyC,QAAQ,CAAC,GAAG,IAAJ,CAA3D;AACA,QAAI;AACF,MAAA,KADE;AAEA,IAAA,EAFJ;;AAIA,QAAI,KAAK,CAAC,GAAN,CAAU,GAAV,CAAJ,EAAoB;AAClB,UAAI;AACF,QAAA,KADE;AAEF,QAAA,OAFE;AAGA,MAAA,KAAK,CAAC,GAAN,CAAU,GAAV,CAHJ;;AAKA,UAAI,OAAO,GAAG,IAAI,CAAC,GAAL,EAAd,EAA0B;AACxB,eAAO,KAAP;AACD;AACF;;AAED,QAAI,KAAK,GAAG,MAAM,CAAC,GAAG,IAAJ,CAAlB;AACA,QAAI,OAAO,GAAG,IAAI,CAAC,GAAL,KAAa,GAA3B;AACA,IAAA,EAAE,CAAC,KAAH,GAAW,KAAK,CAAC,GAAN,CAAU,GAAV,EAAe;AACxB,MAAA,KADwB;AAExB,MAAA,OAFwB,EAAf,CAAX;;;AAKA,WAAO,KAAP;AACD,GAzBQ,EAyBN;AACD,IAAA,KAAK,EAAE,IAAI,UAAU,CAAC,KAAf,EADN,EAzBM,CAAT;;;AA6BA;AACA,SAAO,EAAP;AACD,CApCuB,EAoCrB;AACD,EAAA,KAAK,EAAE,GADN,EApCqB,CAAjB,C","file":"memoize-ttl.js","sourcesContent":["import _ from 'lodash';\n\nimport {\n  Fn\n} from '../types';\n\n/**\n * Part of `lodash-firecloud`.\n *\n * Create a function that memoizes the result of origFn for a specific TTL time window.\n *\n * @param ttl The number of milliseconds to keep the output memoized.\n * @param origFn The function to have its output memoized.\n * @param resolver The function to resolve the cache key.\n * @returns Returns the new memoizing function.\n */\nexport let memoizeTtl = _.assign(function<T extends Fn>(\n  ttl: number,\n  origFn: T,\n  resolver?: (...args: Parameters<T>) => string\n): T & _.MemoizedFunction {\n  let fn = _.assign(function(...args: Parameters<T>): ReturnType<T> {\n    let key = _.isUndefined(resolver) ? _.head(args) : resolver(...args);\n    let {\n      cache\n    } = fn;\n\n    if (cache.has(key)) {\n      let {\n        value,\n        expires\n      } = cache.get(key);\n\n      if (expires > Date.now()) {\n        return value;\n      }\n    }\n\n    let value = origFn(...args);\n    let expires = Date.now() + ttl;\n    fn.cache = cache.set(key, {\n      value,\n      expires\n    });\n\n    return value as ReturnType<T>;\n  }, {\n    cache: new memoizeTtl.Cache()\n  });\n\n  // @ts-ignore\n  return fn;\n}, {\n  Cache: Map\n});\n"]}
{"version":3,"sources":["../../src/mixins/promisify.ts"],"names":[],"mappings":"sGAAA;;;;;;;;AAQA,sC;;;;AAIA;;AAEA;;;;;;;;;;;AAWO,IAAI,SAAS,GAAG,UAAS,MAAT,EAAqB,OAG3C;;;AAAG,EAHmB,EAGN;AACf,kBAAE,QAAF,CAAW,OAAX,EAAoB;AAClB,IAAA,aAAa,EAAE,KADG;AAElB,IAAA,eAAe,EAAE,IAFC,EAApB;;;AAKA,MAAI,EAAE,GAAG,gBAAe,GAAG,IAAlB,EAA0C;AACjD,QAAI,CAAC,GAAG,yBAAR;;AAEA,QAAI,QAAQ,GAAG,UAAS,GAAG,OAAZ,EAAiC;AAC9C,UAAI,OAAO,CAAC,eAAZ,EAA6B;AAC3B,YAAI,GAAG,GAAG,OAAO,CAAC,KAAR,EAAV;AACA,YAAI,CAAC,gBAAE,KAAF,CAAQ,GAAR,CAAL,EAAmB;AACjB,UAAA,CAAC,CAAC,MAAF,CAAS,GAAT;AACA;AACD;AACF;;AAED,cAAQ,OAAO,CAAC,MAAhB;AACA,aAAK,CAAL;AACE,UAAA,CAAC,CAAC,OAAF;AACA;;AAEF,aAAK,CAAL;AACE,UAAA,CAAC,CAAC,OAAF,CAAU,OAAO,CAAC,CAAD,CAAjB;AACA;;AAEF;AACE,UAAA,CAAC,CAAC,OAAF,CAAU,OAAV;AACA,gBAXF;;AAaD,KAtBD;;AAwBA,QAAI,OAAO,CAAC,aAAZ,EAA2B;AACzB,MAAA,IAAI,CAAC,OAAL,CAAa,QAAb;AACD,KAFD,MAEO;AACL,MAAA,IAAI,CAAC,IAAL,CAAU,QAAV;AACD;AACD,IAAA,MAAM,CAAC,GAAG,IAAJ,CAAN;;AAEA,WAAO,CAAC,CAAC,OAAT;AACD,GAnCD;;AAqCA,EAAA,MAAM,CAAC,cAAP,CAAsB,EAAtB,EAA0B,MAAM,CAAC,cAAP,CAAsB,MAAtB,CAA1B;AACA,EAAA,MAAM,CAAC,gBAAP,CAAwB,EAAxB,EAA4B,MAAM,CAAC,yBAAP,CAAiC,MAAjC,CAA5B;;AAEA,SAAO,EAAP;AACD,CAlDM,C","file":"promisify.js","sourcesContent":["import _ from 'lodash';\n\nimport {\n  AsyncFn,\n  CallbackFn,\n  Fn\n} from '../types';\n\nimport {\n  deferred\n} from './deferred';\n\n// NOTE follows closely Node.js util.promisify\n\n/**\n * Part of `lodash-firecloud`.\n *\n * Convert callback-like function into Promise.\n *\n * @param origFn Callback-based function to promisify.\n * @param options Options.\n * @param [options.callbackFirst=false] Specifies if the callback is the first argument to origFn.\n * @param [options.errorInCallback=true] Specifies if error is the first argument to the callback.\n * @returns Returns an async function wrapping the original function.\n */\nexport let promisify = function(origFn: Fn, options: {\n  callbackFirst?: boolean;\n  errorInCallback?: boolean;\n} = {}): AsyncFn {\n  _.defaults(options, {\n    callbackFirst: false,\n    errorInCallback: true\n  });\n\n  let fn = async function(...args): Promise<unknown> {\n    let d = deferred();\n\n    let callback = function(...results): CallbackFn {\n      if (options.errorInCallback) {\n        let err = results.shift();\n        if (!_.isNil(err)) {\n          d.reject(err);\n          return;\n        }\n      }\n\n      switch (results.length) {\n      case 0:\n        d.resolve();\n        break;\n\n      case 1:\n        d.resolve(results[0]);\n        break;\n\n      default:\n        d.resolve(results);\n        break;\n      }\n    };\n\n    if (options.callbackFirst) {\n      args.unshift(callback);\n    } else {\n      args.push(callback);\n    }\n    origFn(...args);\n\n    return d.promise;\n  };\n\n  Object.setPrototypeOf(fn, Object.getPrototypeOf(origFn));\n  Object.defineProperties(fn, Object.getOwnPropertyDescriptors(origFn));\n\n  return fn;\n};\n"]}
{"version":3,"sources":["../../src/mixins/deferred.ts"],"names":[],"mappings":"kNAAA;;AAEA,iC;;;;AAIA;AACA;;;;;AAKA;;;;;;;;AAQO,IAAI,QAAQ,GAAG,UAA2B,OAA3B,EAAqE;AACzF,MAAI,QAAmC,GAAG;AACxC,IAAA,KAAK,EAAE,SADiC,EAA1C;;;AAIA,EAAA,QAAQ,CAAC,OAAT,GAAmB,IAAI,OAAJ,CAAY,UAAS,OAAT,EAAkB,MAAlB,EAA0B;AACvD,IAAA,QAAQ,CAAC,OAAT,GAAmB,UAAS,KAAT,EAAgB;AACjC,MAAA,QAAQ,CAAC,KAAT,GAAiB,KAAjB;AACA,MAAA,QAAQ,CAAC,KAAT,GAAiB,UAAjB;AACA,MAAA,OAAO,CAAC,KAAD,CAAP;AACD,KAJD;;AAMA,IAAA,QAAQ,CAAC,MAAT,GAAkB,UAAS,GAAT,EAAc;AAC9B,MAAA,QAAQ,CAAC,GAAT,GAAe,GAAf;AACA,MAAA,QAAQ,CAAC,KAAT,GAAiB,UAAjB;AACA,MAAA,MAAM,CAAC,GAAD,CAAN;AACD,KAJD;AAKD,GAZkB,CAAnB;;AAcA,MAAI,CAAC,gBAAE,WAAF,CAAc,OAAd,CAAL,EAA6B;AAC3B,oBAAE,KAAF,CAAQ,kBAAiB;AACvB,UAAI;AACF,QAAA,QAAQ,CAAC,OAAT,0CAAiB,MAAM,OAAvB;AACD,OAFD,CAEE,OAAO,GAAP,EAAY;AACZ,QAAA,QAAQ,CAAC,MAAT,CAAgB,GAAhB;AACD;AACF,KAND;AAOD;;AAED,SAAO,QAAP;AACD,CA9BM,C","file":"deferred.js","sourcesContent":["import _ from 'lodash';\n\nimport {\n  Deferred\n} from '../types';\n\n// deprecated. remove in a major release\n// import type from `lodash-firecloud/types` instead\nexport {\n  Deferred\n} from '../types';\n\n/**\n * Part of `lodash-firecloud`.\n *\n * Create a Deferred object that references the promise, the resolve and reject functions.\n *\n * @param [promise] A promise to automatically resolve/reject the Deferred object with.\n * @returns Returns the Deferred object.\n */\nexport let deferred = function<TValue = unknown>(promise?: Promise<any>): Deferred<TValue> {\n  let deferred: Partial<Deferred<TValue>> = {\n    state: 'pending'\n  };\n\n  deferred.promise = new Promise(function(resolve, reject) {\n    deferred.resolve = function(value) {\n      deferred.value = value;\n      deferred.state = 'resolved';\n      resolve(value);\n    };\n\n    deferred.reject = function(err) {\n      deferred.err = err;\n      deferred.state = 'rejected';\n      reject(err);\n    };\n  });\n\n  if (!_.isUndefined(promise)) {\n    _.defer(async function() {\n      try {\n        deferred.resolve(await promise);\n      } catch (err) {\n        deferred.reject(err);\n      }\n    });\n  }\n\n  return deferred as Deferred<TValue>;\n};\n"]}
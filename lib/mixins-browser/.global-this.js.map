{"version":3,"sources":["../../src/mixins-browser/.global-this.ts"],"names":[],"mappings":"kJAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,MAAM,aAAa,GAAG,MAAM;AAC1B,MAAI,8BAAsB,WAA1B,EAAuC;AACvC,MAAI,OAAO,IAAP,KAAgB,WAApB,EAAiC,OAAO,IAAP;AACjC,MAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC,OAAO,MAAP;AACnC;AACA;AACA,QAAM,IAAI,KAAJ,CAAU,gCAAV,CAAN;AACD,CAPD;AAQA;AACA;AACA;;AAEA,IAAI,UAAU,GAAG,uBAAjB;;AAEA;AACA;;AAEA;+CACe,U","file":".global-this.js","sourcesContent":["// from https://mathiasbynens.be/notes/globalthis\n// and yes... \"Don't use this!\"\n\n/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\n// -----------------------------------------------------------------------------\n\n// A naive globalThis shim. Donâ€™t use this!\nconst getGlobalThis = () => {\n  if (typeof globalThis !== 'undefined') return globalThis;\n  if (typeof self !== 'undefined') return self;\n  if (typeof window !== 'undefined') return window;\n  // if (typeof global !== 'undefined') return global;\n  // if (typeof this !== 'undefined') return this;\n  throw new Error('Unable to locate global `this`');\n};\n// Note: `var` is used instead of `const` to ensure `globalThis`\n// becomes a global variable (as opposed to a variable in the\n// top-level lexical scope) when running in the global scope.\n\nvar globalThis = getGlobalThis();\n\n// -----------------------------------------------------------------------------\n/* eslint-enable */\n\n// eslint-disable-next-line import/no-default-export\nexport default globalThis as {\n  CustomEvent: (typeof window)['CustomEvent'];\n  IntersectionObserver: (typeof window)['IntersectionObserver'];\n  MutationObserver: (typeof window)['MutationObserver'];\n  ResizeObserver: (typeof window)['ResizeObserver'];\n};\n"]}
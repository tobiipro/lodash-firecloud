{"version":3,"sources":["../../src/mixins-browser/interval-observer.ts"],"names":[],"mappings":"6GAAA,wD;;;;;;;AAOO,MAAM,gBAAN,CAA2C;;;;;;;;AAQhD,EAAA,WAAW,CAAC,EAAD,EAA8B,8BAPnC,SAOmC,kCALhC,EAKgC;AACvC,SAAK,GAAL,GAAW,EAAX;AACD;;AAED,EAAA,OAAO,CAAC,IAAD;;AAEE;AACP,QAAI;AACF,MAAA,QADE;AAEA,IAAA,IAFJ;AAGA,QAAI,UAAU,GAAG,gBAAE,IAAF,CAAO,KAAK,MAAZ,EAAoB,UAAS,UAAT,EAAqB;AACxD,aAAO,UAAU,CAAC,QAAX,KAAwB,QAA/B;AACD,KAFgB,CAAjB;AAGA,QAAI,WAAW,GAAG,CAAC,gBAAE,WAAF,CAAc,UAAd,CAAnB;AACA,QAAI,WAAJ,EAAiB;AACf;AACD;AACD,QAAI,UAAU,GAAG,WAAW,CAAC,MAAM;AACjC,UAAI,OAAO,GAAG,CAAC;AACb,QAAA,QADa,EAAD,CAAd;;AAGA,WAAK,GAAL,CAAS,OAAT;AACD,KAL2B,EAKzB,QALyB,CAA5B;AAMA,SAAK,MAAL,CAAY,IAAZ,CAAiB;AACf,MAAA,QADe;AAEf,MAAA,UAFe,EAAjB;;AAID;;AAED,EAAA,SAAS,CAAC,IAAD;;AAEA;AACP,QAAI;AACF,MAAA,QADE;AAEA,IAAA,IAFJ;AAGA,QAAI,UAAU,GAAG,gBAAE,IAAF,CAAO,KAAK,MAAZ,EAAoB,UAAS,UAAT,EAAqB;AACxD,aAAO,UAAU,CAAC,QAAX,KAAwB,QAA/B;AACD,KAFgB,CAAjB;AAGA,QAAI,WAAW,GAAG,CAAC,gBAAE,WAAF,CAAc,UAAd,CAAnB;AACA,QAAI,CAAC,WAAL,EAAkB;AAChB;AACD;AACD,IAAA,aAAa,CAAC,UAAU,CAAC,UAAZ,CAAb;AACA;AACA,oBAAE,IAAF,CAAO,KAAK,MAAZ,EAAoB,UAApB;AACD;;AAED,EAAA,UAAU,GAAS;AACjB,oBAAE,OAAF,CAAU,KAAK,MAAf,EAAuB,CAAC,EAAC,QAAD,EAAD,KAAgB;AACrC,WAAK,SAAL,CAAe,EAAC,QAAD,EAAf;AACD,KAFD;AAGD,GA3D+C,C","file":"interval-observer.js","sourcesContent":["import _ from 'lodash';\n\nimport {\n  Observer,\n  ReuseObserverCallbackFn\n} from './reuse-observer';\n\nexport class IntervalObserver implements Observer {\n  _cb = undefined;\n\n  _cache = [] as {\n    interval: number;\n    intervalId: ReturnType<typeof setInterval>;\n  }[];\n\n  constructor(cb: ReuseObserverCallbackFn) {\n    this._cb = cb;\n  }\n\n  observe(args: {\n    interval: number;\n  }): void {\n    let {\n      interval\n    } = args;\n    let cacheEntry = _.find(this._cache, function(cacheEntry) {\n      return cacheEntry.interval === interval;\n    });\n    let isObserving = !_.isUndefined(cacheEntry);\n    if (isObserving) {\n      return;\n    }\n    let intervalId = setInterval(() => {\n      let entries = [{\n        interval\n      }];\n      this._cb(entries);\n    }, interval);\n    this._cache.push({\n      interval,\n      intervalId\n    });\n  }\n\n  unobserve(args: {\n    interval: number;\n  }): void {\n    let {\n      interval\n    } = args;\n    let cacheEntry = _.find(this._cache, function(cacheEntry) {\n      return cacheEntry.interval === interval;\n    });\n    let isObserving = !_.isUndefined(cacheEntry);\n    if (!isObserving) {\n      return;\n    }\n    clearInterval(cacheEntry.intervalId);\n    // eslint-disable-next-line lodash/prefer-immutable-method\n    _.pull(this._cache, cacheEntry);\n  }\n\n  disconnect(): void {\n    _.forEach(this._cache, ({interval}) => {\n      this.unobserve({interval});\n    });\n  }\n}\n"]}
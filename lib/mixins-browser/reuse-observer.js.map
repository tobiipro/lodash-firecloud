{"version":3,"sources":["../../src/mixins-browser/reuse-observer.ts"],"names":[],"mappings":"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","file":"reuse-observer.js","sourcesContent":["import _ from 'lodash';\nimport globalThis from './.global-this';\n\nimport {\n  CallbackFn\n} from '../types';\n\n// Create an reusable matchy-match (and normalized) observer.\n// - reusable because it's the observe method that takes a callback, which will only fire for the matching entries\n// - matchy-match because the observe method takes a _.isMatch object to filter matching entries\n// - normalized because the observer works the same no matter the source observer:\n//   - all callbacks get a reference to the observer\n//   - even MutationObserver has a unobserve method\n//   - CustomIntersectionObserver can't take options in the constructor\n//   - CanonicalIntersectionObserver takes options in the observe method, not in the constructor\n//\n// Usage:\n//\n// let observer = _.reuseObserver(MutationObserver);\n// canonical form:\n// let unobserve = observer.observe(\n//   {element: document.documentElement},\n//   function(documentElementMutationRecords) {...},\n//   document.documentElement\n// );\n// or convenience form:\n// let unobserve = observer.observe(\n//   document.documentElement,\n//   function(documentElementMutationRecords) {...}\n// );\n//\n// let observer = _.reuseObserver(IntervalObserver);\n// let unobserve = observer.observe(\n//   {interval: 1000},\n//   function(everySecondEntries) {...},\n//   {interval: 1000}\n// );\n//\n// let observer = _.reuseObserver(getCustomIntersectionObserver(options));\n// let unobserve = observer.observe(\n//   {element: document.documentElement},\n//   function(documentElementEntries)\n// );\n//\n// Similarly\n\nexport interface ReuseObserverCallbackFn {\n  (entries: unknown[], ...args: unknown[]): void;\n}\n\nexport interface Observer {\n  observe(...args: unknown[]): void;\n  unobserve?(...args: unknown[]): void;\n  disconnect?(): void;\n}\n\nexport interface ObserverConstructor {\n  new(...args: any[]): Observer;\n}\n\nexport interface ReuseObserver extends Observer {\n  _cb: CallbackFn;\n  observe(...args: unknown[]): CallbackFn;\n}\n\nexport interface IsEntryMatchFn {\n  (source: object, object: object): boolean;\n}\n\ntype ElementObserver = IntersectionObserver | MutationObserver | ResizeObserver;\n\nlet _observerIsElementObserver = function(observer: ElementObserver | unknown): observer is ElementObserver {\n  if (observer instanceof globalThis.IntersectionObserver) {\n    return true;\n  }\n  if (observer instanceof globalThis.MutationObserver) {\n    return true;\n  }\n  if (observer instanceof globalThis.ResizeObserver) {\n    return true;\n  }\n  return false;\n};\n\nlet _memoizeResolver = function(Observer: ObserverConstructor, isEntryMatch: IsEntryMatchFn): string {\n  return Observer.toString() + isEntryMatch.toString();\n};\n\n/**\n * Part of `lodash-firecloud`.\n *\n * Create an observer that reuses an instance of a given Observer class.\n *\n * @param Observer The Observer class.\n * @param [isEntryMatch=_.isMatch] The function to check if entries match.\n * @returns Returns a reused Observer.\n *\n */\nexport let reuseObserver = _.memoize(function(\n  Observer: ObserverConstructor,\n  isEntryMatch: IsEntryMatchFn = _.isMatch.bind(_)\n) {\n  let matchListenerPairs = []; // [{match, listeners}]\n  let cb = function(entries, ...args): void {\n    // normalize cb signature to always pass a reference to the observer\n    // eslint-disable-next-line babel/no-invalid-this\n    if (_.includes(args, this)) {\n      // eslint-disable-next-line babel/no-invalid-this\n      args.push(this);\n    }\n\n    _.forEach(matchListenerPairs, function({match, listeners}): void {\n      let matchingEntries = _.filter(entries, function(entry): boolean {\n        return isEntryMatch(entry, match);\n      });\n\n      _.forEach(listeners, function(listener): void {\n        listener(matchingEntries, ...args);\n      });\n    });\n  };\n\n  let observer = new Observer(cb) as ReuseObserver;\n  let originalObserve = observer.observe.bind(observer);\n  observer.observe = function(match: any, listener, ...observeArgs): CallbackFn {\n    // convenience for known element observers\n    if (_observerIsElementObserver(observer)) {\n      if (_.isElement(match)) {\n        match = {\n          target: match\n        };\n      }\n      if (!_.isElement(observeArgs[0])) {\n        observeArgs.unshift(match.target);\n      }\n    }\n\n    let matchListenersPair = _.find(matchListenerPairs, function(matchListenersPair) {\n      return matchListenersPair.match === match;\n    });\n    if (_.isUndefined(matchListenersPair)) {\n      matchListenersPair = {\n        match,\n        listeners: []\n      };\n      matchListenerPairs.push(matchListenersPair);\n    }\n    matchListenersPair.listeners.push(listener);\n    originalObserve(...observeArgs);\n\n    let unobserve = (...args): void => {\n      this.unobserve(match, listener, ...args);\n    };\n    return unobserve;\n  };\n\n  let originalUnobserve = _.defaultTo(observer.observe, _.noop).bind(observer);\n  observer.unobserve = function(match: any, listener, ...unobserveArgs): void {\n    if (_.isFunction(originalUnobserve)) {\n      // convenience for known element observers\n      if (_observerIsElementObserver(observer)) {\n        if (_.isElement(match)) {\n          match = {\n            target: match\n          };\n        }\n        if (!_.isElement(unobserveArgs[0])) {\n          unobserveArgs.unshift(match.target);\n        }\n      }\n    }\n\n    // eslint-disable-next-line lodash/prefer-immutable-method\n    _.remove(matchListenerPairs, function(matchListenersPair) {\n      return matchListenersPair.match === match && matchListenersPair.listener === listener;\n    });\n    originalUnobserve(...unobserveArgs);\n  };\n\n  let originalDisconnect = _.defaultTo(observer.disconnect, _.noop).bind(observer);\n  observer.disconnect = function(): void {\n    originalDisconnect();\n    matchListenerPairs = [];\n  };\n\n  return observer;\n});\n"]}